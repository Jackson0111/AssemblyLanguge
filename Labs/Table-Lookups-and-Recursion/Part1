.data
	names:		.asciiz 	"steve","john","chelsea","julia","ryan" 
	ages:		.byte		20,25,22,21,23
	ask:		.asciiz		"Please enter a name:"
	found:		.asciiz		"Age is: "
	notFound: 	.asciiz		"Not found!"
	inputString: 	.space		50
.text
	
	addi	$v0, $zero, 4		# "Please enter a name: "
	la	$a0, ask
	syscall
	
	addi	$v0, $zero, 8		# user's input string
	la	$a0, inputString	# store the address of input string in $a0
	li	$a1, 50
	syscall
	
	add	$s0, $zero, $zero	# counter (index)
	la	$a1, names		# store name table address in $a1
	
	letsFindIt:
	beq	$s0, 5, dne
	jal	_StrEqual
	beq	$v0, 0, notThere
	beq	$v0, 1, itsThere
	
	itsThere:
	la	$a0, ages		# address of ages
	add	$a1, $zero, $s0		# index
	jal	_LookUpAge
	add	$s1, $zero, $v0		# $s1 - age 
	addi	$v0, $zero, 4
	la	$a0, found
	syscall
	addi	$v0, $zero, 1		# print age
	add	$a0, $zero, $s1
	syscall
	addi	$v0, $zero, 10
	syscall
	
	notThere:
	addi	$s0, $s0, 1		# counter ++
	addi	$a1, $a1, 1		# address ++
	j	letsFindIt
	
	dne:
	addi	$v0, $zero, 4
	la	$a0, notFound
	syscall
	addi	$v0, $zero, 10
	syscall
	
# _strLength
# Arguments:
#	$a0 - address of a null-terminated string
# Return Values":
#	$v0 - length of the specified string
_StrLength:
	addi	$sp, $sp, -16
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp)
	add	$s0, $zero, $a0		# $t0 - Load address of the string 
	li	$s1, 0			# $t1 - Set counter to zero(length of the string) 
	
	length:
	lbu	$s2, 0($s0)		# $t2 - Load the first byte of the string
	beq	$s2, $0, strDone	# 	If the current byte is 0(null character), we are done
	beq	$s2, 10, getRidOfNL	# 	Get rid of the new line character 
	addi	$s0, $s0, 1		# 	Else increment the address
	addi	$s1, $s1, 1		# 	Counter++ 
	j	length			# 	Jump back to the loop
	
	getRidOfNL:
	add	$s2, $zero, $zero
	sb	$s2, 0($s0)
	j	length
	
	strDone:
	add	$v0, $zero, $s1		# $v0 - Store the length of the string 
	lw	$s2, 12($sp)
	lw	$s1, 8($sp)
	lw	$s0, 4($sp)
	lw	$ra, 0($sp)
	addi	$sp, $sp, 16
	jr	$ra			# $ra - Return value

# _StrEqual
# Arguments:
#	$a0 - address of user's input string
#	$a1 - string from the table to be compared with the input string 
# Return Values:
#	$v0 - 1 if the string is found, 0 if they dont match 
_StrEqual:
	addi	$sp, $sp, -28
	sw	$s5, 24($sp)
	sw	$s4, 20($sp)
	sw	$s3, 16($sp)
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp)
	
	add	$s0, $zero, $a0
	add	$s1, $zero, $a1
	jal	_StrLength
	add	$s2, $zero, $v0		# $s2 - length of input string
	add	$a0, $zero, $a1
	jal	_StrLength
	add	$a0, $zero, $s0
	add	$s3, $zero, $v0		# $s3 - length of string from the table 
	beq	$s2, $s3, loop		# if the length is the same, check each character
	j	notEqual		# else, not match
	
	loop:
	lb	$s4, 0($s0)		#current character of the input string
	lb	$s5, 0($s1)		# current character of the string from the table 
	beq	$s4, $0, equal
	beq	$s4, $s5, next
	j	notEqual
	
	next:
	addi	$s0, $s0, 1
	addi	$s1, $s1, 1
	j	loop
	
	equal:
	addi	$v0, $zero, 1
	lw	$s5, 24($sp)
	lw	$s4, 20($sp)
	lw	$s3, 16($sp)
	lw	$s2, 12($sp)
	lw	$s1, 8($sp)
	lw	$s0, 4($sp)
	lw	$ra, 0($sp)
	addi	$sp,$sp, 28
	jr	$ra
	notEqual:
	add	$a1, $a1, $s3
	addi	$v0, $zero, 0
	lw	$s5, 24($sp)
	lw	$s4, 20($sp)
	lw	$s3, 16($sp)
	lw	$s2, 12($sp)
	lw	$s1, 8($sp)
	lw	$s0, 4($sp)
	lw	$ra, 0($sp)
	addi	$sp,$sp, 28
	jr	$ra
	
# _LookUpAge
# Arguments:
#	$a0 - address of a byte array
#	$a1 - index
# Return Values:
#	$v0 - value at the index
_LookUpAge:
	
	add	$t0, $zero, $a0		# $t0 - address of ages
	add	$t1, $zero, $a1		# $t1 - index
	add	$t2, $zero, $zero	# $t2 - counter=0
	
	findAge:
	beq	$t2, $t1, ageFound	
	addi	$t2, $t2, 1		# counter ++
	addi	$t0, $t0, 1		# address ++
	j	findAge
	ageFound:
	lb	$v0, 0($t0)
	jr	$ra
